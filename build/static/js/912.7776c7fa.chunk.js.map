{"version":3,"file":"static/js/912.7776c7fa.chunk.js","mappings":"8NACA,EAAuB,0B,SCSvB,EARoB,SAACA,GACnB,OACE,eAAIC,UAAWC,EAAa,UAC1B,uBAAIF,EAAMG,QAGhB,ECPA,EAA2B,+BCY3B,EAVqB,SAACH,GACpB,OACE,eAAIC,UAAWC,EAAiB,SAC7BF,EAAMI,SAASC,KAAI,SAACC,GAAO,OAC1B,SAAC,EAAW,CAAkBH,KAAMG,EAAQH,MAA1BG,EAAQC,GAA0B,KAI5D,ECVA,EAA2B,2B,SCA3B,EAAuB,6BAAvB,EAAwG,gCAAxG,EAAkJ,gCCkDlJ,EA5CuB,SAACP,GACtB,IAAMQ,GAAiBC,EAAAA,EAAAA,UACvB,GAKIC,EAAAA,EAAAA,GAAQC,EAAAA,IAJVC,EAAW,EAAXA,YACAC,EAAM,EAANA,OACMC,EAAc,EAApBC,KACAC,EAAK,EAALA,MAEFC,QAAQC,IAAIJ,GAEZ,IAAQK,EAAkBnB,EAAlBmB,eAERC,EAAAA,EAAAA,YAAU,WACO,cAAXP,GAA2BG,GAAOG,GACxC,GAAG,CAACN,EAAQG,EAAOG,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAchB,EAAeiB,QAAQC,MAI3Cd,EAAY,CAAEe,YAAa,CAAExB,KAAMqB,GAAeI,QAAS5B,EAAM4B,SACnE,EAEA,OACE,kBAAM3B,UAAWC,EAAc2B,SAAUR,EAAkB,UAC7C,YAAXR,IACC,gBAAKZ,UAAU,WAAU,UACvB,SAAC6B,EAAA,EAAc,OAGnB,iBAAK7B,UAAWC,EAAiB2B,SAAUR,EAAkB,WAC3D,kBAAOU,QAAQ,UAAS,SAAC,kBACzB,qBAAUxB,GAAG,UAAUyB,KAAK,IAAIC,IAAKzB,QAEvC,gBAAKP,UAAWC,EAAgB,UAC9B,mBAAQD,UAAU,MAAK,SAAC,oBAIhC,ECcA,EArDiB,WACf,OAA8CiC,EAAAA,EAAAA,WAAS,GAAM,eAAtDC,EAAe,KAAEC,EAAkB,KACpCC,GAASC,EAAAA,EAAAA,MACf,GAAsD5B,EAAAA,EAAAA,GAAQ6B,EAAAA,IAAtD3B,EAAW,EAAXA,YAAaC,EAAM,EAANA,OAAcC,EAAc,EAApBC,KAErBa,EAAYS,EAAZT,SAERR,EAAAA,EAAAA,YAAU,WACRR,EAAYgB,EACd,GAAG,CAAChB,EAAagB,IAEjB,IAMIxB,EAHEoC,GAAuBC,EAAAA,EAAAA,cAAY,WACvC7B,EAAYgB,EACd,GAAG,CAAChB,EAAagB,IAkBjB,MAfe,YAAXf,IACFT,GACE,gBAAKH,UAAU,WAAU,UACvB,SAAC6B,EAAA,EAAc,OAKN,cAAXjB,IAA2BC,GAAkBA,EAAiB,KAChEV,GAAW,SAAC,EAAY,CAACA,SAAUU,KAEtB,cAAXD,GAA4BC,GAAqC,IAAnBA,IAChDV,GAAW,cAAGH,UAAU,WAAU,SAAC,iCAInC,qBAASA,UAAWC,EAAiB,WACnC,wBAAI,mBACFiC,IACA,mBAAQlC,UAAU,MAAMyC,QA3BC,WAC7BN,GAAmB,EACrB,EAyB8D,SAAC,kBAI1DD,IACC,SAAC,EAAc,CACbP,QAASS,EAAOT,QAChBT,cAAeqB,IAGlBpC,IAGP,C","sources":["webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+vwzS\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__UVWAR\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(addComment);\n  console.log(loadedComments);\n\n  const { onAddComments } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) onAddComments();\n  }, [status, error, onAddComments]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport CommentsList from \"./CommentsList\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentsHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && (loadedComments || loadedComments > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (status === \"completed\" && (!loadedComments || loadedComments === 0)) {\n    comments = <p className=\"centered\">No Comments Were Added Yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddComments={addedCommentsHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"],"names":["props","className","classes","text","comments","map","comment","id","commentTextRef","useRef","useHttp","addComment","sendRequest","status","loadedComments","data","error","console","log","onAddComments","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","rows","ref","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","addedCommentsHandler","useCallback","onClick"],"sourceRoot":""}